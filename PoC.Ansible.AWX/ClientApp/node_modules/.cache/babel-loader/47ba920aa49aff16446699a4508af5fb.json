{"ast":null,"code":"var _jsxFileName = \"D:\\\\DevApp\\\\PoC.Ansible.AWX\\\\PoC.Ansible.AWX\\\\ClientApp\\\\src\\\\components\\\\Counter.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCount: 0,\n      currentstatus: false\n    };\n    this.incrementCounter = this.incrementCounter.bind(this);\n  }\n\n  incrementCounter() {\n    this.setState({\n      currentCount: this.state.currentCount + 1\n    });\n    this.populateAWXJobTemplate();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Counter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This is a simple example of a React component.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        \"aria-live\": \"polite\",\n        children: [\"Current count: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [this.state.currentCount, \" / \", this.state.currentstatus.toString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 46\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"vm name\",\n        placeholder: \"vm name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"ip\",\n        placeholder: \"ip\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: this.populateAWXJobTemplate,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  async populateAWXJobTemplate() {\n    this.setState({\n      currentstatus: false\n    });\n    const response = await fetch('api/AWXJobTemplate/CallTemplate');\n    const data = await response.json(); //this.setState({ forecasts: data, loading: false });\n    // console.log(\"data\", this.state.currentstatus.toString());\n\n    var i = 0;\n    var data2;\n\n    do {\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      const response2 = await fetch('api/AWXJobTemplate/GetById/' + data.job);\n      data2 = await response2.json(); //console.log(\"data2\",  !data2.results[0].failed);\n\n      if (data2.count !== 0) {\n        i = 1;\n      }\n    } while (i === 0); // console.log(\"data2\",  !data2.results[0].failed);\n\n\n    this.setState({\n      currentstatus: !data2.results[0].failed\n    }); // console.log(\"data2results\", data2.results[0].failed);\n  }\n\n}\nCounter.displayName = Counter.name;","map":{"version":3,"sources":["D:/DevApp/PoC.Ansible.AWX/PoC.Ansible.AWX/ClientApp/src/components/Counter.js"],"names":["React","Component","Counter","constructor","props","state","currentCount","currentstatus","incrementCounter","bind","setState","populateAWXJobTemplate","render","toString","response","fetch","data","json","i","data2","Promise","resolve","setTimeout","response2","job","count","results","failed","displayName","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,OAAO,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAGrCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,YAAY,EAAE,CAAhB;AAAoBC,MAAAA,aAAa,EAAE;AAAnC,KAAb;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDD,EAAAA,gBAAgB,GAAG;AACjB,SAAKE,QAAL,CAAc;AACZJ,MAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,GAA0B;AAD5B,KAAd;AAGA,SAAKK,sBAAL;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE;AAAG,qBAAU,QAAb;AAAA,mDAAqC;AAAA,qBAAS,KAAKP,KAAL,CAAWC,YAApB,SAAqC,KAAKD,KAAL,CAAWE,aAAX,CAAyBM,QAAzB,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,SAAtB;AAAgC,QAAA,WAAW,EAAC;AAA5C;AAAA;AAAA;AAAA;AAAA,cANF,eAOE;AAAA;AAAA;AAAA;AAAA,cAPF,oBAOQ;AAAA;AAAA;AAAA;AAAA,cAPR,eAQE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,IAAtB;AAA4B,QAAA,WAAW,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,cARF,eASE;AAAA;AAAA;AAAA;AAAA,cATF,oBASQ;AAAA;AAAA;AAAA;AAAA,cATR,eAUE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE,KAAKF,sBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAE2B,QAAtBA,sBAAsB,GAAG;AAE7B,SAAKD,QAAL,CAAc;AACZH,MAAAA,aAAa,EAAE;AADH,KAAd;AAGA,UAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAN6B,CAO7B;AACA;;AAEA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,KAAJ;;AACA,OAAG;AACD,YAAM,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAjC,CAAN;AACA,YAAME,SAAS,GAAG,MAAMR,KAAK,CAAC,gCAAgCC,IAAI,CAACQ,GAAtC,CAA7B;AACAL,MAAAA,KAAK,GAAG,MAAMI,SAAS,CAACN,IAAV,EAAd,CAHC,CAID;;AAEA,UAAIE,KAAK,CAACM,KAAN,KAAgB,CAApB,EAAuB;AAAEP,QAAAA,CAAC,GAAG,CAAJ;AAAQ;AAElC,KARD,QAQSA,CAAC,KAAK,CARf,EAZ6B,CAqB7B;;;AACA,SAAKR,QAAL,CAAc;AACZH,MAAAA,aAAa,EAAE,CAACY,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiBC;AADrB,KAAd,EAtB6B,CAyB7B;AACD;;AA3DoC;AAA1BzB,O,CACJ0B,W,GAAc1B,OAAO,CAAC2B,I","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Counter extends Component {\r\n  static displayName = Counter.name;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentCount: 0,  currentstatus: false };\r\n    this.incrementCounter = this.incrementCounter.bind(this);\r\n  }\r\n\r\n  incrementCounter() {\r\n    this.setState({\r\n      currentCount: this.state.currentCount + 1\r\n    });\r\n    this.populateAWXJobTemplate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Counter</h1>\r\n\r\n        <p>This is a simple example of a React component.</p>\r\n\r\n        <p aria-live=\"polite\">Current count: <strong>{this.state.currentCount} / {this.state.currentstatus.toString()}</strong></p>\r\n        <input type=\"text\" id=\"vm name\" placeholder=\"vm name\" ></input>\r\n        <br/> <br/>\r\n        <input type=\"text\" id=\"ip\"  placeholder=\"ip\"  ></input>\r\n        <br/> <br/>\r\n        <button className=\"btn btn-primary\" onClick={this.populateAWXJobTemplate}>Increment</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async populateAWXJobTemplate() {\r\n\r\n    this.setState({\r\n      currentstatus: false\r\n    });\r\n    const response = await fetch('api/AWXJobTemplate/CallTemplate');\r\n    const data = await response.json();\r\n    //this.setState({ forecasts: data, loading: false });\r\n    // console.log(\"data\", this.state.currentstatus.toString());\r\n  \r\n    var i = 0 ;\r\n    var data2;\r\n    do {\r\n      await new Promise(resolve => setTimeout(resolve, 3000))\r\n      const response2 = await fetch('api/AWXJobTemplate/GetById/' + data.job);\r\n      data2 = await response2.json();\r\n      //console.log(\"data2\",  !data2.results[0].failed);\r\n   \r\n      if (data2.count !== 0) { i = 1; }      \r\n      \r\n    } while (i === 0);\r\n    // console.log(\"data2\",  !data2.results[0].failed);\r\n    this.setState({\r\n      currentstatus: !data2.results[0].failed\r\n    });\r\n    // console.log(\"data2results\", data2.results[0].failed);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}